#!/usr/local/bin/python3

# rackcli - commandline supplemnt for VCV Rack w/ rackshim dependency
#           settings in ~/.rachcli/settings.json

from pathlib import Path
from hashlib import sha256
from typing import *
import json, click, requests

SYNC_URL = 'https://9k564tm679.execute-api.us-east-1.amazonaws.com/dev/sync'
SHARE_URL = 'https://9k564tm679.execute-api.us-east-1.amazonaws.com/dev/share'

def hash(rv: str, ps: str, pv: str, ms: str) -> str:
    'hash rack version, plugin slug/version, model slug'
    return(sha256(str.encode('{}|{}|{}|{}'.format(rv, ps, pv, ms))).hexdigest())

def catalog_share_corpus(catalog: Dict) -> Dict[str, Tuple]:
    'generate partial corpus from catalog for sharing with cloud'
    return({hash(catalog['applicationVersion'], p['slug'], p['version'], m['slug']):
            (catalog['applicationVersion'], p['slug'], p['version'], m['slug'], m['width']) \
            for p in catalog['plugins'] for m in p['models']})

def patch_share_corpus(patch: Dict) -> Dict[str, Tuple]:
    'corpus request from a "r4xH4x patch" patch'
    return({hash(patch['version'], m['plugin'], m['version'], m['model']):
            (patch['version'], m['plugin'], m['version'], m['model'], m['width']) for m in patch['modules']})

def partial_catalog_sync_request(partial: Dict) -> List[str]:
    'corpus request for your catalog.partial.json'
    return([hash(partial['applicationVersion'], p['slug'], p['version'], m['slug']) \
            for p in partial['plugins'] for m in p['models']])

@click.group()
def cli():
    '''rackcli, v0.1.0

    \b
    Supplemental tooling incubator for VCV Rack.

    \b
    https://github.com/dirkleas/rackcli
    dirkleas@gmail.com
    '''
    pass

@cli.command()
@click.option('--rackdir', help='Save VCV Rack full directory path.',
    type=click.Path(exists=True, file_okay=False, resolve_path=True))
def settings(rackdir: str) -> None:
    'Manage rackcli settings.'
    cdir = Path(Path.home() / '.rackcli'); sp = Path(cdir / 'settings.json')
    if not cdir.exists(): # optionally seed .rackcli w/ settings.json
        cdir.mkdir(mode=0o700);
        sp.touch(mode=0o700); sp.write_text('{}')
    s = json.loads(sp.read_text())
    if not rackdir: print(s); return # dump settings
    s['rackdir'] = rackdir
    sp.write_text(json.dumps(s, indent=2))

@cli.command()
@click.option('--share', help='Share your full VCVRACK/catalog.json with crowdsourced cloud.',
    type=click.Path(exists=True, dir_okay=False, resolve_path=True))
@click.option('--sync', help='Sync your VCVRACK/catalog.partial.json with crowdsourced cloud.',
    type=click.Path(exists=True, dir_okay=False, resolve_path=True))
def catalog(share, sync) -> None:
    'Manage rackcli catalog located in VCV Rack directory.'
    def no_rackdir() -> None: raise click.UsageError('Unknown rackdir, see rackcli settings --help')
    sp = Path(Path.home() / '.rackcli/settings.json')
    if not sp.exists(): no_rackdir(); return
    s = json.loads(sp.read_text())
    if not 'rackdir' in s: no_rackdir(); return
    if share and sync: raise click.UsageError('Use --sync or --share, not both.'); return
    if share: # share either PATCH.vcv or catalog.json
        share = Path(share)
        if not share.suffix in ['.vcv', '.json']: raise click.UsageError('.vcv and .json files only.'); return
        request = json.loads(share.read_text())
        if share.suffix == '.vcv': # share patch
            request = patch_share_corpus(request)
            print(json.dumps(requests.post(SHARE_URL, json=request).json(), indent=2, ensure_ascii=False))
            return
        request = catalog_share_corpus(request) # share catalog
        print(json.dumps(requests.post(SHARE_URL, json=request).json(), indent=2, ensure_ascii=False))
        return
    if sync: # sync catalog.partial.json
        sync = Path(sync)
        if not sync.suffix in ['.json']: raise click.UsageError('.json files only.'); return
        request = partial_catalog_sync_request(json.loads(sync.read_text()))
        print(json.dumps(requests.post(SYNC_URL, json=request).json(), indent=2, ensure_ascii=False)); return
    raise click.UsageError('Use --sync or --share.')

if __name__ == '__main__':
    cli()
